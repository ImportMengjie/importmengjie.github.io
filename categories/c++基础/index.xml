<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>C++基础 - Category - ImportMengjie's Blog</title><link>https://importmengjie.github.io/categories/c++%E5%9F%BA%E7%A1%80/</link><description>C++基础 - Category - ImportMengjie's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>limengjie@hotmail.com (mengjie)</managingEditor><webMaster>limengjie@hotmail.com (mengjie)</webMaster><lastBuildDate>Sat, 31 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://importmengjie.github.io/categories/c++%E5%9F%BA%E7%A1%80/" rel="self" type="application/rss+xml"/><item><title>一些我竟然不知道的C++相关知识 - 这都不知道「持续更新」</title><link>https://importmengjie.github.io/posts/dont-even-know-that_cpp/</link><pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate><author><name>mengjie</name></author><guid>https://importmengjie.github.io/posts/dont-even-know-that_cpp/</guid><description>&lt;p>最近一段时间在工作中或看书遇到的一些关于C++有意思的知识记录成本文。包括i++和++i的左右值问题、无符号和有符号比较、C++正则库中 regex_match 的坑、shared_ptr 的妙用: copy-on-other-reading、协变返回类型、switch case 语句 break 的使用、将new对象初始化指针放在独立语句、std::stack为何提供pop和top两个函数而不是合二为一。&lt;/p></description></item><item><title>一些C++从C语言继承的好用特性 - C++基础</title><link>https://importmengjie.github.io/posts/cpp_base_c_feat/</link><pubDate>Sat, 24 Aug 2024 23:24:27 +0800</pubDate><author><name>Author</name></author><guid>https://importmengjie.github.io/posts/cpp_base_c_feat/</guid><description><![CDATA[<p>阅读《嵌入式C语言自我修养 - 从芯片、编译器到操作系统》<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>这本书时学习到了很多C语言中的有用特性，让人不禁感慨C语言也在与时俱进。这些特性在C++中也完全可以使用，学了也不白学，在工作上有用武之地。另外对于宏定义这种功能可以生成代码增加键盘寿命，相较于C++模板晦涩难懂，宏更直观。这次也一并系统的学习宏并且记录成本文。<strong>不过需要注意的是有些特性并不是C++标准直接支持而是编译器扩展支持，所以用这些特性会丧失可移植性</strong>。</p>]]></description></item><item><title>右值、右值引用、万能引用与完美转发 - C++基础</title><link>https://importmengjie.github.io/posts/cpp_base_right_value/</link><pubDate>Sun, 11 Aug 2024 10:38:25 +0800</pubDate><author><name>Author</name></author><guid>https://importmengjie.github.io/posts/cpp_base_right_value/</guid><description><![CDATA[<p>右值引用是C++11标准提出的非常重要概念，正确使用可以提升执行效率。此前已经系统看过很多遍，可惜看一遍忘一遍。此次系统学习记录下来，供日后回忆。主要参考《现代C++语言核心特性解析》<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>和《Effective Modern C++》<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>。</p>]]></description></item></channel></rss>